// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  salaryInfo    SalaryInfo[]
  term          Term[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

//追加
model Term {
  id                          String   @unique @default(cuid())
  userId                      String
  year                        Int
  createdAt                   DateTime @default(now())
  updatedAt                   DateTime @updatedAt
  user                        User     @relation(fields: [userId], references: [id])
  salaryInfo                  SalaryInfo[]
  @@unique([userId, year])
}

model SalaryInfo {
  id                          String   @unique @default(cuid())
  userId                      String
  termId                      String
  month                       Int
  //収入
  basicSalary                 Int?  @default(0)
  overtimePay                 Int?  @default(0)
  allowances                  Int?  @default(0)
  bonus                       Int?  @default(0)
  otherSalary                 Int?  @default(0)
  //控除　　
  incomeTax                   Int?  @default(0)
  residentTax                 Int?  @default(0)
  healthInsurancePremium      Int?  @default(0)
  annuityPrice                Int?  @default(0)
  employmentInsurancePremium  Int?  @default(0)
  federalLawPermits           Int?  @default(0)
  otherDeductin               Int?  @default(0)

  createdAt                   DateTime @default(now())
  updatedAt                   DateTime @updatedAt
  user                        User     @relation(fields: [userId], references: [id])
  term                        Term     @relation(fields: [termId], references: [id])
  @@unique([termId, month])
}
